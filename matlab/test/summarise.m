function summarise(test)

% SUMMARISE collate test results into a summary
%
% SYNTAX:
%
% summarise('test')
%
% This function reads in a test file (generated by the MAKETEST command)
% and test results (generated by the RUNTEST command) and produces a
% summary file which can then be displayed with the SHOWTEST command.
%
% This involves stepping through each of the results files in turn and
% generating statistics on these results.
%
% NOTE: This could be a _lot_ more efficient... currently it just goes
% through and calculates the whole lot, using up a helluva lot of memory
% for large trials.  This might need to be fixed if I actually do any
% large trials...

% summarise.m
% Jeremy Barnes, 23/9/1999
% $Id$

global DATA_SAVE_PATH;

if (isempty(DATA_SAVE_PATH))
   error(['runtest: must set global variable DATA_SAVE_PATH before you' ...
	  ' begin']);
end

% Test file name
testfile = [DATA_SAVE_PATH '/' test '.mat'];
progfile = [DATA_SAVE_PATH '/' test '-progress.mat'];

% Load in our test
load_error = 0;
eval('load(testfile);', 'load_error = 1;');

if (load_error)
   error('Could not load test file.  Create it with maketest.');
end

% The final form of the summary is a 3-dimensional array.  The first
% dimension is the noise values.  The second dimension is the p values.
% The third dimension is the iteration numbers.

% We also keep a second array that contains the number of values that
% have been added together in the first array.  This is necessary as
% training may abort, meaning that more make it to lower
% iterations than to higher iterations.

num_p_values = length(p);
num_noise_values = length(noise);

test_res  = zeros(num_noise_values, num_p_values, numiterations);
train_res = test_res;
count_res = test_res;

% The counter variables
trial = 1;
pvalue = 1;
noisevalue = 1;

disp('Collating results...');

% Go through and load all of our files

for noisevalue=1:num_noise_values
   for pvalue=1:num_p_values
      for trial=1:trials
	 
	 disp(['Trial ' int2str(trial) ' p=' num2str(p(pvalue)) ...
	       ' noise=' num2str(noise(noisevalue))]);
	 
	 % Save the results
	 load_filename = [DATA_SAVE_PATH '/' test '-trial' int2str(trial) ...
			  '-pvalue' int2str(pvalue) '-noisevalue' ...
			  int2str(noisevalue)];
	 
	 load(load_filename, 'teste', 'traine');
	 
	 it = length(teste);
	 padding = zeros(1, numiterations-it);
	 counts = ones(1, it);

	 test_add(1, 1, :) = [teste padding];
	 train_add(1, 1, :) = [traine padding];
	 count_add(1, 1, :) = [counts padding];
	 
	 % Update totals and count values
	 test_res(noisevalue, pvalue, :) = ...
	     test_res(noisevalue, pvalue, :) + test_add;

	 train_res(noisevalue, pvalue, :) = ...
	     train_res(noisevalue, pvalue, :) + train_add;
	 
	 count_res(noisevalue, pvalue, :) = ...
	     count_res(noisevalue, pvalue, :) + count_add;
      end
   end
end

disp('Calculating averages...');

% total / count = average
test_res = test_res ./ count_res;
train_res = train_res ./ count_res;

disp('Saving...');

% Save the file
savefile = [DATA_SAVE_PATH '/' test '-summary.mat'];

save(savefile, 'test_res', 'train_res', 'count_res', 'name', 'algorithm', ...
     'p', 'dist', 'samples', 'noise', 'numiterations', 'trials');

% Finished!
 
