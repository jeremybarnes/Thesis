function display_results(test, varargin)

% DISPLAY_RESULTS display collated test results
%
% SYNTAX:
%
% display_results('test', options...)
%
% This function reads in a summary file (generated by SUMMARISE) and
% draws a bunch of graphs of what happened.
%
% TEST is the name of the test to display results for.
%
% OPTIONS will allow various things to be specified, such as which graphs
% to draw... currently, it does SFA.

% display_results.m
% Jeremy Barnes, 23/9/1999
% $Id$

% How to lay out our pages
plot_cols = 4;
plot_rows = 4;

% The counter variables
current_fig = 0;
current_subplot = plot_cols*plot_rows+1;

% Find out about the test that we are plotting
test_info = get_test_info(test);

% Go through and load all of our files
train_mean = get_test_results(test, 'train_mean', 'all', 'all');
train_std  = get_test_results(test, 'train_std',  'all', 'all');

test_mean = get_test_results(test, 'test_mean', 'all', 'all');
test_std  = get_test_results(test, 'test_std',  'all', 'all');


for noisevalue=1:length(test_info.noise)
   current_noise = test_info.noise(noisevalue);
   for pvalue=1:length(test_info.p)
      current_p = test_info.p(pvalue);
      
      if (current_subplot > plot_rows*plot_cols)
	 current_subplot = 1;
	 current_fig = current_fig + 1;
	 figure(current_fig);  clf;
      end
      
      subplot(plot_rows, plot_cols, current_subplot);
      current_subplot = current_subplot + 1;
      
      train_d = train_mean(noisevalue, pvalue, :);
      test_d = test_mean(noisevalue, pvalue, :);
      graphtitle = ['noise=' num2str(current_noise) ...
		    ' p = ' num2str(current_p)];
      draw_training_profile(test_d, train_d, graphtitle);
   end
end


function draw_training_profile(test_d, train_d, graphtitle)

% Draws a graph

iter = 1:length(test_d);
semilogx(iter, test_d, 'r-');  hold on;

iter = 1:length(train_d);
semilogx(iter, train_d, 'b-');

grid on;

%xlabel('Iterations');
%ylabel('Error');

%legend('Test error', 'Training error');
title(graphtitle);




